package com.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.demo.Model.Category;
import com.demo.Model.Product;
import com.demo.service.ProductService;

@RestController
@RequestMapping("/Product")
public class ProductController {
	
	@Autowired
	private ProductService ps;
	

	@PostMapping("/AddProduct/{catId}")
	public ResponseEntity<Product> saveProduct(@RequestBody Product product, @PathVariable int catId) {
	    Product savedProduct = ps.addProduct(product, catId);
	    
	    if (savedProduct != null) {
	        return ResponseEntity.ok(savedProduct);
	    } else {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
	    }
	}

	
	@GetMapping("/viewAll")
	public ResponseEntity<List<Product>> vieWAllProduct() {
	    List<Product> viewAll = ps.ViewAllProduct();
	    if (!viewAll.isEmpty()) {
	        return ResponseEntity.ok(viewAll);
	    } else {
	        return ResponseEntity.noContent().build(); 
	    }
	}

	
	@DeleteMapping("/DeleteById/{id}")
	public ResponseEntity<String> deleteByID(@PathVariable int id) {
	    boolean deleted = ps.deleteProduct(id);
	    if (deleted) {
	        return ResponseEntity.ok("Product with ID " + id + " deleted successfully.");
	    } else {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Product with ID " + id + " not found.");
	    }
	}


	@GetMapping("/viewProductById/{ProductId}")
	public ResponseEntity<Product> viewProductById(@PathVariable int ProductId) {
	    Product product = ps.findProductById(ProductId);
	    if (product != null) {
	        return ResponseEntity.ok(product);
	    } else {
	        return ResponseEntity.notFound().build();
	    }
	}


	@PutMapping("/update/{productID}")
	 public Product updateproduct(@PathVariable int productID,	Product newproduct ){
		Product updateProduct = ps.updateProduct(productID, newproduct);
		return updateProduct;
		 
	 }
	
	  
    @GetMapping("/getProductByCategory/{catId}")
    public ResponseEntity<List<Product>> getProductByCategory(@PathVariable int catId) {
        List<Product> products = ps.getProductByCategory(catId);
        if (!products.isEmpty()) {
            return ResponseEntity.ok(products);
        } else {
            return ResponseEntity.noContent().build();
        }
    }
	
	
	
}
